{
  "commands": {
    "account:create": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/AccountCreate",
      "commandName": "account:create",
      "description": "create account for cert authority. example: node ace account:create --email admin@exmaple.com --env=staging --ca=le",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        }
      ]
    },
    "ca:clear": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CaClear",
      "commandName": "ca:clear",
      "description": "clear the table cert_authorities",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "yes",
          "propertyName": "yes",
          "type": "boolean",
          "alias": "y",
          "description": "confirm to clear the table cert_authorities"
        }
      ]
    },
    "ca:discover": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CaDiscover",
      "commandName": "ca:discover",
      "description": "Discover all ca directories to database",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "cert:apply": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CertApply",
      "commandName": "cert:apply",
      "description": "",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "sleep",
          "propertyName": "sleep",
          "type": "number"
        },
        {
          "name": "file",
          "propertyName": "file",
          "type": "string",
          "description": "TOML config file",
          "alias": "f"
        }
      ]
    },
    "cert:deploy": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CertDeploy",
      "commandName": "cert:deploy",
      "description": "Deploy certificate",
      "args": [
        {
          "type": "string",
          "propertyName": "domainOrId",
          "name": "domainOrId",
          "required": false,
          "description": "domain name or id of a deployment"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "all",
          "propertyName": "all",
          "type": "boolean"
        }
      ]
    },
    "cert:deploy-local": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CertDeployLocal",
      "commandName": "cert:deploy-local",
      "description": "Export certificate / key to local file",
      "args": [
        {
          "type": "string",
          "propertyName": "domain",
          "name": "domain",
          "required": true,
          "description": "Domain Name"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "key",
          "propertyName": "key",
          "type": "string",
          "description": "Key file"
        },
        {
          "name": "cert",
          "propertyName": "cert",
          "type": "string",
          "description": "Cert file"
        },
        {
          "name": "yes",
          "propertyName": "yes",
          "type": "boolean",
          "description": "Overwrite file?",
          "alias": "y"
        }
      ]
    },
    "cert:deploy-ssh": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CertDeploySsh",
      "commandName": "cert:deploy-ssh",
      "description": "Deploy cert to remote ssh host",
      "args": [
        {
          "type": "string",
          "propertyName": "domain",
          "name": "domain",
          "required": false,
          "description": "certificate domain name"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "host",
          "propertyName": "host",
          "type": "string",
          "description": "ssh host to deploy",
          "alias": "H"
        },
        {
          "name": "port",
          "propertyName": "port",
          "type": "number",
          "description": "ssh port, default 22",
          "alias": "P"
        },
        {
          "name": "user",
          "propertyName": "user",
          "type": "string",
          "description": "ssh user, default root",
          "alias": "u"
        },
        {
          "name": "ssh-private-key",
          "propertyName": "sshPrivateKey",
          "type": "string",
          "description": "ssh key file"
        },
        {
          "name": "key-file",
          "propertyName": "keyFile",
          "type": "string",
          "description": "remote ssh location to deploy certificate key file"
        },
        {
          "name": "cert-file",
          "propertyName": "certFile",
          "type": "string",
          "description": "remote ssh location to deploy certificate cert file"
        },
        {
          "name": "reload-command",
          "propertyName": "reloadCommand",
          "type": "string",
          "description": "ssh reload command to reload cerificate"
        },
        {
          "name": "save",
          "propertyName": "save",
          "type": "boolean",
          "description": "save the deployment to database"
        }
      ]
    },
    "cert:renew": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/CertRenew",
      "commandName": "cert:renew",
      "description": "Renew certificate",
      "args": [
        {
          "type": "string",
          "propertyName": "domain",
          "name": "domain",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "sleep",
          "propertyName": "sleep",
          "type": "number"
        }
      ]
    },
    "dns:cred": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/DnsCred",
      "commandName": "dns:cred",
      "description": "Create/Update/Delete a dns credential",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "provider",
          "propertyName": "provider",
          "type": "string",
          "description": "Dns Provider, e.g. aliyun"
        },
        {
          "name": "list",
          "propertyName": "list",
          "type": "boolean",
          "description": "List supportted dns providers"
        },
        {
          "name": "rm",
          "propertyName": "rm",
          "type": "boolean",
          "description": "Delete credential by --cred [credential name]"
        },
        {
          "name": "cred",
          "propertyName": "cred",
          "type": "string",
          "description": "Credential name"
        }
      ]
    },
    "dns:set": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/DnsSet",
      "commandName": "dns:set",
      "description": "Set dns record for certification orders",
      "args": [
        {
          "type": "string",
          "propertyName": "domain",
          "name": "domain",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "cred",
          "propertyName": "cred",
          "type": "string"
        },
        {
          "name": "rm",
          "propertyName": "rm",
          "type": "boolean",
          "description": "Delete the added txt record on _acme-challenge.hostname"
        }
      ]
    },
    "dns:verify": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/DnsVerify",
      "commandName": "dns:verify",
      "description": "Verify dns challenge",
      "args": [
        {
          "type": "string",
          "propertyName": "domain",
          "name": "domain",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "nameserver",
          "propertyName": "nameserver",
          "type": "array",
          "description": "Specify DNS(UDP) nameserver list"
        }
      ]
    },
    "order:create": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/OrderCreate",
      "commandName": "order:create",
      "description": "Create certification order",
      "args": [
        {
          "type": "spread",
          "propertyName": "domains",
          "name": "domains",
          "required": true,
          "description": "domains, e.g. *.example.com www.example.com"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        }
      ]
    },
    "order:finish": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/OrderFinish",
      "commandName": "order:finish",
      "description": "Finish the verification and download cert",
      "args": [
        {
          "type": "string",
          "propertyName": "domain",
          "name": "domain",
          "required": true
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "yes",
          "propertyName": "yes",
          "type": "boolean",
          "alias": "y",
          "description": "confirm the challenge has done"
        }
      ]
    },
    "order:list": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/OrderList",
      "commandName": "order:list",
      "description": "List orders",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "order:purge": {
      "settings": {
        "loadApp": true,
        "stayAlive": false
      },
      "commandPath": "./commands/OrderPurge",
      "commandName": "order:purge",
      "description": "Purge exist orders",
      "args": [
        {
          "type": "spread",
          "propertyName": "domains",
          "name": "domains",
          "required": true,
          "description": "domains, e.g. *.example.com www.example.com"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "ca",
          "propertyName": "ca",
          "type": "string",
          "description": "options: letsencrypt | le | zerossl | zs | buypass | bp"
        },
        {
          "name": "env",
          "propertyName": "env",
          "type": "string",
          "description": "options: staging | production"
        },
        {
          "name": "email",
          "propertyName": "email",
          "type": "string",
          "description": "order's account email"
        },
        {
          "name": "yes",
          "propertyName": "yes",
          "type": "boolean",
          "alias": "y",
          "description": "confirm the challenge has done"
        }
      ]
    },
    "dump:rcfile": {
      "settings": {},
      "commandPath": "@adonisjs/core/build/commands/DumpRc",
      "commandName": "dump:rcfile",
      "description": "Dump contents of .adonisrc.json file along with defaults",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "list:routes": {
      "settings": {
        "loadApp": true,
        "stayAlive": true
      },
      "commandPath": "@adonisjs/core/build/commands/ListRoutes/index",
      "commandName": "list:routes",
      "description": "List application routes",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "verbose",
          "propertyName": "verbose",
          "type": "boolean",
          "description": "Display more information"
        },
        {
          "name": "reverse",
          "propertyName": "reverse",
          "type": "boolean",
          "alias": "r",
          "description": "Reverse routes display"
        },
        {
          "name": "methods",
          "propertyName": "methodsFilter",
          "type": "array",
          "alias": "m",
          "description": "Filter routes by method"
        },
        {
          "name": "patterns",
          "propertyName": "patternsFilter",
          "type": "array",
          "alias": "p",
          "description": "Filter routes by the route pattern"
        },
        {
          "name": "names",
          "propertyName": "namesFilter",
          "type": "array",
          "alias": "n",
          "description": "Filter routes by route name"
        },
        {
          "name": "json",
          "propertyName": "json",
          "type": "boolean",
          "description": "Output as JSON"
        },
        {
          "name": "table",
          "propertyName": "table",
          "type": "boolean",
          "description": "Output as Table"
        },
        {
          "name": "max-width",
          "propertyName": "maxWidth",
          "type": "number",
          "description": "Specify maximum rendering width. Ignored for JSON Output"
        }
      ]
    },
    "generate:key": {
      "settings": {},
      "commandPath": "@adonisjs/core/build/commands/GenerateKey",
      "commandName": "generate:key",
      "description": "Generate a new APP_KEY secret",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "repl": {
      "settings": {
        "loadApp": true,
        "environment": "repl",
        "stayAlive": true
      },
      "commandPath": "@adonisjs/repl/build/commands/AdonisRepl",
      "commandName": "repl",
      "description": "Start a new REPL session",
      "args": [],
      "aliases": [],
      "flags": []
    },
    "db:seed": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbSeed",
      "commandName": "db:seed",
      "description": "Execute database seeders",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection for the seeders",
          "alias": "c"
        },
        {
          "name": "interactive",
          "propertyName": "interactive",
          "type": "boolean",
          "description": "Run seeders in interactive mode",
          "alias": "i"
        },
        {
          "name": "files",
          "propertyName": "files",
          "type": "array",
          "description": "Define a custom set of seeders files names to run",
          "alias": "f"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        }
      ]
    },
    "db:wipe": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbWipe",
      "commandName": "db:wipe",
      "description": "Drop all tables, views and types in database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "drop-views",
          "propertyName": "dropViews",
          "type": "boolean",
          "description": "Drop all views"
        },
        {
          "name": "drop-types",
          "propertyName": "dropTypes",
          "type": "boolean",
          "description": "Drop all custom types (Postgres only)"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        }
      ]
    },
    "db:truncate": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/DbTruncate",
      "commandName": "db:truncate",
      "description": "Truncate all tables in database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        }
      ]
    },
    "make:model": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/MakeModel",
      "commandName": "make:model",
      "description": "Make a new Lucid model",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the model class"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "migration",
          "propertyName": "migration",
          "type": "boolean",
          "alias": "m",
          "description": "Generate the migration for the model"
        },
        {
          "name": "controller",
          "propertyName": "controller",
          "type": "boolean",
          "alias": "c",
          "description": "Generate the controller for the model"
        },
        {
          "name": "factory",
          "propertyName": "factory",
          "type": "boolean",
          "alias": "f",
          "description": "Generate a factory for the model"
        }
      ]
    },
    "make:migration": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/MakeMigration",
      "commandName": "make:migration",
      "description": "Make a new migration file",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the migration file"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "The connection flag is used to lookup the directory for the migration file"
        },
        {
          "name": "folder",
          "propertyName": "folder",
          "type": "string",
          "description": "Pre-select a migration directory"
        },
        {
          "name": "create",
          "propertyName": "create",
          "type": "string",
          "description": "Define the table name for creating a new table"
        },
        {
          "name": "table",
          "propertyName": "table",
          "type": "string",
          "description": "Define the table name for altering an existing table"
        }
      ]
    },
    "make:seeder": {
      "settings": {},
      "commandPath": "@adonisjs/lucid/build/commands/MakeSeeder",
      "commandName": "make:seeder",
      "description": "Make a new Seeder file",
      "args": [
        {
          "type": "string",
          "propertyName": "name",
          "name": "name",
          "required": true,
          "description": "Name of the seeder class"
        }
      ],
      "aliases": [],
      "flags": []
    },
    "make:factory": {
      "settings": {},
      "commandPath": "@adonisjs/lucid/build/commands/MakeFactory",
      "commandName": "make:factory",
      "description": "Make a new factory",
      "args": [
        {
          "type": "string",
          "propertyName": "model",
          "name": "model",
          "required": true,
          "description": "The name of the model"
        }
      ],
      "aliases": [],
      "flags": [
        {
          "name": "model-path",
          "propertyName": "modelPath",
          "type": "string",
          "description": "The path to the model"
        },
        {
          "name": "exact",
          "propertyName": "exact",
          "type": "boolean",
          "description": "Create the factory with the exact name as provided",
          "alias": "e"
        }
      ]
    },
    "migration:run": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Run",
      "commandName": "migration:run",
      "description": "Migrate database by running pending migrations",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force to run migrations in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        }
      ]
    },
    "migration:rollback": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Rollback",
      "commandName": "migration:rollback",
      "description": "Rollback migrations to a specific batch number",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explictly force to run migrations in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "batch",
          "propertyName": "batch",
          "type": "number",
          "description": "Define custom batch number for rollback. Use 0 to rollback to initial state"
        },
        {
          "name": "compact-output",
          "propertyName": "compactOutput",
          "type": "boolean",
          "description": "A compact single-line output"
        }
      ]
    },
    "migration:status": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Status",
      "commandName": "migration:status",
      "description": "View migrations status",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        }
      ]
    },
    "migration:reset": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Reset",
      "commandName": "migration:reset",
      "description": "Rollback all migrations",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        }
      ]
    },
    "migration:refresh": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Refresh",
      "commandName": "migration:refresh",
      "description": "Rollback and migrate database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "dry-run",
          "propertyName": "dryRun",
          "type": "boolean",
          "description": "Do not run actual queries. Instead view the SQL output"
        },
        {
          "name": "seed",
          "propertyName": "seed",
          "type": "boolean",
          "description": "Run seeders"
        }
      ]
    },
    "migration:fresh": {
      "settings": {
        "loadApp": true
      },
      "commandPath": "@adonisjs/lucid/build/commands/Migration/Fresh",
      "commandName": "migration:fresh",
      "description": "Drop all tables and re-migrate the database",
      "args": [],
      "aliases": [],
      "flags": [
        {
          "name": "connection",
          "propertyName": "connection",
          "type": "string",
          "description": "Define a custom database connection",
          "alias": "c"
        },
        {
          "name": "force",
          "propertyName": "force",
          "type": "boolean",
          "description": "Explicitly force command to run in production"
        },
        {
          "name": "seed",
          "propertyName": "seed",
          "type": "boolean",
          "description": "Run seeders"
        },
        {
          "name": "drop-views",
          "propertyName": "dropViews",
          "type": "boolean",
          "description": "Drop all views"
        },
        {
          "name": "drop-types",
          "propertyName": "dropTypes",
          "type": "boolean",
          "description": "Drop all custom types (Postgres only)"
        }
      ]
    }
  },
  "aliases": {}
}
